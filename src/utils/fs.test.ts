// TODO generated by GPT4, looks like needs some cleanup. Committing as-is for now, to demonstrate testing.

import { PathLike } from 'fs';
import { rm, access } from 'fs/promises';
import { dirExists, makeDir, fileExists, getFileText, putFileText } from './fs';

// Teardown utility
const teardown = async (path: PathLike): Promise<void> => {
    try {
        await rm(path, { recursive: true, force: true });
    } catch (err) {
        console.error(`Failed to remove ${path}:`, err);
    }
};

describe('File and Directory Utilities', () => {
    // Test dirExists
    it('should verify that a directory exists', async () => {
        const path: PathLike = './testDir';
        await makeDir(path);

        const exists = await dirExists(path);
        expect(exists).toBe(true);

        await teardown(path);
    });

    // Test makeDir
    it('should create a directory', async () => {
        const path: PathLike = './anotherTestDir';
        await makeDir(path);

        try {
            await access(path);
        } catch (err) {
            fail(`Directory ${path} should exist`);
        }

        await teardown(path);
    });

    // Test fileExists and putFileText
    it('should verify that a file exists and can have text put into it', async () => {
        const path: PathLike = './testFile.txt';
        const content: string = 'Hello, world!';
        await putFileText(path, content);

        const exists = await fileExists(path);
        expect(exists).toBe(true);

        await teardown(path);
    });

    // Test getFileText
    it('should retrieve text from a file', async () => {
        const path: PathLike = './anotherTestFile.txt';
        const content: string = 'File content';
        await putFileText(path, content);

        const retrievedContent = await getFileText(path);
        expect(retrievedContent).toBe(content);

        await teardown(path);
    });
});
